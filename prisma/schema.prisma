datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  index          Int                   @unique @default(autoincrement())
  user_id        String                @id @unique @default(uuid())
  email          String                @unique
  profile        Profile?
  stats          Stats?
  account        Account?
  logs           Log[]
  channels       ChannelMember[]
  actions        Action[]
  collaborations CollaborationMember[]
}

model Profile {
  index      Int      @unique @default(autoincrement())
  profile_id String   @id @unique @default(uuid())
  username   String   @unique
  avatar_url String
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Account {
  account_id     String   @id @unique @default(uuid())
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id        String   @unique
  first_name     String
  last_name      String
  allow_searchig Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Stats {
  index                      Int      @unique @default(autoincrement())
  stats_id                   String   @id @unique @default(uuid())
  user_id                    String   @unique
  user                       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  collaboration_count        Int
  author_count               Int
  active_team_count          Int
  average_collaboration_time Float
  total_collaboration_time   Float
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt
}

model Log {
  index      Int      @unique @default(autoincrement())
  log_id     String   @id @unique @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  type       LogType
  drawing_id String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Channel {
  index            Int             @unique @default(autoincrement())
  name             String          @unique
  channel_id       String          @id @unique @default(uuid())
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  collaboration_id String?
  members          ChannelMember[]
  type             ChannelType     @default(Public)
}

model ChannelMember {
  index      Int        @unique @default(autoincrement())
  channel_id String
  member_id  String     @id @unique @default(uuid())
  user_id    String
  type       MemberType
  messages   Message[]
  member     User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  channel    Channel    @relation(fields: [channel_id], references: [channel_id], onDelete: Cascade)
}

model Message {
  index        Int           @unique @default(autoincrement())
  message_id   String        @id @unique @default(uuid())
  member_id    String
  sender       ChannelMember @relation(fields: [member_id], references: [member_id], onDelete: Cascade)
  message_data String
  created_at   DateTime      @default(now())
}

model Drawing {
  title            String
  index            Int           @unique @default(autoincrement())
  drawing_id       String        @id @unique @default(uuid())
  thumbnail_url    String        @default("")
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  collaboration_id String        @unique
  collaboration    Collaboration @relation(fields: [collaboration_id], references: [collaboration_id], onDelete: Cascade)
  background_color String        @default("#FFFFFF")
  width            Int           @default(1280)
  height           Int           @default(752)
}

model Action {
  index         Int           @unique @default(autoincrement())
  dbActionId    String        @id @unique @default(uuid())
  user          User          @relation(fields: [userId], references: [user_id])
  collaboration Collaboration @relation(fields: [collaborationId], references: [collaboration_id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Mandatory:
  actionId        String
  username        String
  userId          String
  collaborationId String
  actionType      ActionType

  // Freedraw:
  x       Float?
  y       Float?
  r       Int?
  g       Int?
  b       Int?
  a       Int?
  width   Float?
  offsets String?

  // Shapes
  x2         Float?
  y2         Float?
  rFill      Int?
  gFill      Int?
  bFill      Int?
  aFill      Int?
  shapeType  ShapeType?  @default(Null)
  shapeStyle ShapeStyle? @default(border)

  // Shared:
  state      ActionState?
  isSelected Boolean?
  selectedBy String       @default("")
}

model CollaborationMember {
  collaboration_member_id String        @id @unique @default(uuid())
  index                   Int           @unique @default(autoincrement())
  type                    MemberType
  collaboration_id        String
  user_id                 String
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt
  user                    User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  collaboration           Collaboration @relation(fields: [collaboration_id], references: [collaboration_id], onDelete: Cascade)
}

model Collaboration {
  index                  Int                   @unique @default(autoincrement())
  collaboration_id       String                @id @unique @default(uuid())
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  collaboration_members  CollaborationMember[]
  drawing                Drawing?
  actions                Action[]
  type                   CollaborationType
  max_collaborator_count Int                   @default(4)
  password               String?
}

// Enums
enum LogType {
  Connection
  Disconnection
  DrawingUpdate
}

enum MemberType {
  Owner
  Regular
}

enum ActionState {
  move
  up
  down
}

enum ChannelType {
  Private
  Public
}

enum ShapeType {
  Rectangle
  Ellipse
  Null
}

enum ShapeStyle {
  center
  border
  fill
}

enum ActionType {
  Freedraw
  Shape
  Select
  Translate
  Rotate
  Delete
  Resize
  Text
  Layer
  UndoRedo
}

enum CollaborationType {
  Private
  Public
  Protected
}
