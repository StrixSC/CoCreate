{
    "openapi": "3.0.1",
    "info": {
        "title": "Colorimage API",
        "description": "Official documentation of the Colorimage API.\n\n **The `Users` routes have not been implemented yet.**",
        "version": "1.0.1"
    },
    "servers": [
        {
            "url": "https://colorimage-109-3900.herokuapp.com/"
        },
        {
            "url": "http://localhost:3000"
        }
    ],
    "paths": {
        "/auth/login": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Log user in",
                "operationId": "login",
                "requestBody": {
                    "description": "Requires the email and the password of the user.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IAuthPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success. User was logged in successfully.\n\nThis will remove any other sessions opened by a user with this email.\n\nThe session ID is returned in a cookie named `connect.sid`. You need to include this cookie in subsequent requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IUser"
                                },
                                "example": {
                                    "user_id": "48bffc61-a8ef-55e3-aa6b-fb5640a90eab",
                                    "email": "demo@colorimage.com",
                                    "username": "demo",
                                    "avatar_url": "https://storage.googleapis.com/1ccd570e-fed0-5049-9143-7e98b240a574.jpg"
                                }
                            }
                        },
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "connect.sid={...}; Path=/; HttpOnly; Expires=Sun, 24 Oct 2021 20:53:30 GMT;"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid email or password (No user was found).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Invalid email address or password."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Internal Server Error."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "Cookie Auth": []
                    }
                ],
                "tags": ["Authentication"],
                "summary": "Log user out",
                "operationId": "logout",
                "description": "The user's `connect.sid` cookie must be attached to the request. This request deletes the session from the database. This wil remove any persistent data on the server.",
                "responses": {
                    "200": {
                        "description": "Success. User was logged out successfully.\n\nThis will remove any other sessions opened by a user with this email.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "OK"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. No user logged in.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Unauthorized"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Internal Server Error."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Registers the user using the provided information",
                "operationId": "register",
                "description": "Registers the user using the provided information, if the email or username are not in use.",
                "requestBody": {
                    "description": "Requires the email and the password of the user.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IRegistrationPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created. User was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "User created successfully."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid format of email or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Invalid format of email or password"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid email or password (No user was found).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Invalid email address or password"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Not acceptable. A user is already logged in, log user out first.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "User is already authentified. To logout, use /auth/logout"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict. Username or email already in use.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Username or email already in use"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected internal server error. This could be due to a problem during JWT token generation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Internal Server Error."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/:id": {
            "get": {
                "parameters": [
                    {
                        "required": true,
                        "name": "user_id",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": ["Users"],
                "summary": "Fetch all information of the user with the given id",
                "security": [
                    {
                        "Cookie Auth": []
                    }
                ],
                "operationId": "complete user",
                "responses": {
                    "200": {
                        "description": "Success. Returns a JSON with the user's complete information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IUserComplete"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content. Request was successful, but no content was found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Request was successful, but no content was found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid or missing identifier format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Invalid or missing identifier format."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The provided authentication cookie does not meet the necessary criterias to complete the request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Unauthorized."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Internal Server Error."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/profile": {
            "get": {
                "parameters": [
                    {
                        "required": false,
                        "name": "offset",
                        "description": "The amount of indexes to skip. Default: 0",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "required": false,
                        "name": "limit",
                        "description": "The maximum length of the returned array. Default: 50",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": ["Users"],
                "summary": "Fetch all public profiles",
                "operationId": "users",
                "responses": {
                    "200": {
                        "description": "Success. Returns an array of all public users information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IUserPublicProfile"
                                },
                                "example": [
                                    {
                                        "index": 1,
                                        "username": "demoUser1",
                                        "avatar_url": "http://storage.googleapis.com/f0c9aac4-1d2a-5e41-88a8-8c2e0174d392.jpg"
                                    },
                                    {
                                        "index": 2,
                                        "username": "demoUser2",
                                        "avatar_url": "http://storage.googleapis.com/d6831468-3247-5085-ac77-17830b9ca857.jpg"
                                    },
                                    {
                                        "index": 3,
                                        "username": "demoUser3",
                                        "avatar_url": "http://storage.googleapis.com/46f15fdd-2a5c-59fa-9489-ae07b9e3aab2.jpg"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid format of offset and/or limit.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Invalid format of offset and/or limit."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Internal Server Error."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/profile/:username": {
            "get": {
                "parameters": [
                    {
                        "required": true,
                        "name": "username",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": ["Users"],
                "summary": "Fetch public profile of a specific user",
                "operationId": "single user",
                "responses": {
                    "200": {
                        "description": "Success. Returns a JSON with the user's public information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IUserPublicProfile"
                                },
                                "example": {
                                    "username": "demoUser1",
                                    "avatar_url": "http://storage.googleapis.com/f0c9aac4-1d2a-5e41-88a8-8c2e0174d392.jpg"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content. Request was successful, but no content was found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Request was successful, but no content was found."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid or missing identifier format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Invalid or missing identifier format."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IMessage"
                                },
                                "example": {
                                    "message": "Internal Server Error."
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "Cookie Auth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "connect.sid"
            }
        },
        "schemas": {
            "IAuthPayload": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "IRegistrationPayload": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "example": "email@provider.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password must be at least 8 characters, have: \n \n- at least one digit \n- at least one UPPERCASE character\n \n- at least one lowercase character \n- at least one special character\n\nThis regex should be valid for the enterred password: \n\n`^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$`"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the registering user. The username must be unique"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "The first name of the registering user."
                    },
                    "last_name": {
                        "type": "string",
                        "description": "The last name of the registering user."
                    }
                }
            },
            "IUser": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username (Pseudonyme) of the user"
                    },
                    "avatar_url": {
                        "type": "string",
                        "description": "URL pointing to the location of the avatar of the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the requesting user"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User id of the requesting user"
                    }
                }
            },
            "IUserComplete": {
                "type": "object",
                "properties": {
                    "profile": {
                        "type": "object",
                        "description": "Username (Pseudonyme) of the user",
                        "properties": {
                            "username": {
                                "type": "string",
                                "example": "AlejandroGordon123"
                            },
                            "avatar_url": {
                                "type": "string",
                                "description": "URL pointing to the location of the avatar of the user.",
                                "example": "https://storage.googleapis.com/efb5f957-bd28-5f61-beb4-a82c6dce4fe5.jpg"
                            }
                        }
                    },
                    "account": {
                        "type": "object",
                        "properties": {
                            "first_name": {
                                "type": "string",
                                "example": "Alejandro"
                            },
                            "last_name": {
                                "type": "string",
                                "example": "Gordon"
                            }
                        }
                    },
                    "stats": {
                        "type": "object",
                        "properties": {
                            "collaboration_count": {
                                "type": "string",
                                "description": "Number of collaborations the user has been a part of."
                            },
                            "authorCount": {
                                "type": "integer",
                                "description": "Number of authored drawings."
                            },
                            "active_team_count": {
                                "type": "string",
                                "description": "Total team count of the user."
                            },
                            "average_collaboration_time": {
                                "type": "string",
                                "description": "Average drawing collaboration time of the user."
                            },
                            "total_collaboration_time": {
                                "type": "string",
                                "description": "Total drawing collaboration time of the user."
                            }
                        }
                    },
                    "logs": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Type of the log.\n\nPossible values:\n\n- Connection\n\n- Disconnection\n\n- DrawingUpdate"
                                },
                                "created_at": {
                                    "type": "string",
                                    "description": "Timestamp of the log"
                                },
                                "drawing_id": {
                                    "type": "string",
                                    "description": "[OPTIONAL] If the log type is 'DrawingUpdate', then a drawing id will be present, this can be used to redirect the user to the updated drawing."
                                }
                            }
                        }
                    },
                    "email": {
                        "type": "string",
                        "description": "Requesting user's email."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "Requesting user's id."
                    }
                }
            },
            "IUserPublicProfile": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username (Pseudonyme) of the user"
                    },
                    "avatar_url": {
                        "type": "string",
                        "description": "URL pointing to the location of the avatar of the user."
                    },
                    "index": {
                        "type": "number",
                        "description": "Index of the user's profile in the list of profiles. This is used for identification and cursor pagination."
                    }
                }
            },
            "IMessage": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
